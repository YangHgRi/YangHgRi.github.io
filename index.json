[{"content":"","date":"21 September 2025","externalUrl":null,"permalink":"/","section":"HenryYang's blog","summary":"","title":"HenryYang's blog","type":"page"},{"content":" Prerequisites # Hugo: The latest version installed. You can find it on the Hugo Releases page. Git: Installed and configured. Download Git here. GitHub Account: A free account on GitHub. Custom Domain: Optional but recommended. If you don\u0026rsquo;t have one, you can purchase one from a domain registrar. Popular options include: Namecheap GoDaddy Process # 1. GitHub Repository Setup # Create a new repository on GitHub. Name it \u0026lt;username\u0026gt;.github.io, replacing \u0026lt;username\u0026gt; with your actual GitHub username. For example, if your username is octocat, the repository name must be octocat.github.io.\nClone the repository to your local machine. You can rename the local folder for convenience.\ngit clone https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git blog cd blog 2. Hugo Site Initialization # Create a new Hugo site inside the cloned repository. Use the --force flag because the directory already contains the .git folder.\nhugo new site . --force Choose and install a theme using Git Submodules. There are many excellent themes available. Here are a few highly recommended options:\nPaperMod — A fast, clean, and feature-rich theme designed for blogs, with built-in search, dark mode, and strong SEO support. Stack — A modern card-style theme that emphasizes visual hierarchy and readability, ideal for personal blogs and writing platforms. Blowfish — A powerful and highly customizable theme with Tailwind CSS, multilingual support, and built-in features for charts, math, and technical content. For this guide, we will install Blowfish. Execute the following command in your project\u0026rsquo;s root directory:\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish This command downloads the theme into the themes/blowfish directory and creates a .gitmodules file in your project to track it.\nConfigure your site. Open the hugo.toml file. You must set the theme parameter to match the theme\u0026rsquo;s folder name. Also, set your site\u0026rsquo;s baseURL and title.\nbaseURL = \u0026#34;https://foobar.blog/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;blowfish\u0026#34; Note: Each theme has its own unique configuration options. Refer to the theme\u0026rsquo;s documentation for details on how to customize it.\nCreate your first post.\nhugo new content posts/my-first-post.md Open the newly created file at content/posts/my-first-post.md and ensure the front matter has draft: false so it will be published.\nTest your site locally to make sure everything looks correct.\nhugo server You can view your site at http://localhost:7081/.\n3. GitHub Actions Workflow for Automation # This workflow will automatically build your Hugo site and deploy it to the gh-pages branch whenever you push changes to your main branch.\nCreate the workflow directory and file.\nmkdir -p .github/workflows touch .github/workflows/deploy.yml Add the workflow configuration to the deploy.yml file.\nname: Deploy Hugo Site to GitHub Pages on: # Runs on pushes targeting the default branch push: branches: - main # Or whatever your default branch is # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs: build-deploy: runs-on: ubuntu-latest steps: # Checks-out your repository and its submodules - name: Checkout uses: actions/checkout@v4 with: submodules: true # This is CRITICAL for fetching the theme fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod # Installs the latest version of Hugo - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extend: true # Builds the site and places the output in the \u0026#39;public\u0026#39; directory - name: Build run: hugo --minify # Deploys the built site to the \u0026#39;gh-pages\u0026#39; branch - name: Deploy uses: peaceiris/actions-gh-pages@v4 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages # Set a branch name to use as GitHub Pages branch. The default is gh-pages. publish_dir: ./public 4. Configuring Your Custom Domain # To point your custom domain to your GitHub Pages site, you need to configure DNS records with your domain registrar.\nLog in to your domain registrar\u0026rsquo;s website (e.g., Namecheap, GoDaddy). Navigate to the DNS management or DNS settings panel for your domain.\nChoose the correct configuration based on whether you are using an apex domain or a subdomain.\nOption A: For an Apex Domain (e.g., foobar.blog)\nYou must create A (for IPv4) and AAAA (for IPv6) records. Create four of each, pointing to the GitHub Pages IP addresses. The host/name for all records should be @ or left blank, which represents the root domain itself.\nA records (IPv4):\n185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 AAAA records (IPv6):\n2606:50c0:8000::153 2606:50c0:8001::153 2606:50c0:8002::153 2606:50c0:8003::153 Option B: For a Subdomain (e.g., www.foobar.blog)\nCreate a single CNAME record. Point the subdomain (the host/name will be www) to your default GitHub Pages URL.\nType: CNAME Host/Name: www Value/Target: \u0026lt;username\u0026gt;.github.io Note: DNS changes can take a few minutes to several hours to propagate across the internet.\n5. Final Deployment and Repository Settings # Commit and push all your local changes to the main branch on GitHub. This will include your Hugo configuration, content, the theme submodule (.gitmodules file), and the workflow file.\ngit add . git commit -m \u0026#34;Initial commit of Hugo site with theme submodule\u0026#34; git push origin main Configure GitHub Pages settings in your repository.\nGo to your repository on GitHub and click Settings \u0026gt; Pages. Under \u0026ldquo;Build and deployment\u0026rdquo;, set the Source to \u0026ldquo;Deploy from a branch\u0026rdquo;. Under \u0026ldquo;Branch\u0026rdquo;, select gh-pages and / (root) for the folder. Click Save. Your GitHub Actions workflow will automatically create and push to the gh-pages branch. Once this branch is present, these settings will activate GitHub Pages.\nVerify your custom domain.\nIn the same Pages settings, the \u0026ldquo;Custom domain\u0026rdquo; field should automatically populate with your domain after the workflow has run successfully. Once GitHub verifies your domain (which may take a few moments after DNS has propagated), check the box for \u0026ldquo;Enforce HTTPS\u0026rdquo; to secure your site. Your site is now live! Any future push to the main branch will automatically trigger the workflow, rebuild your site with the theme, and update the live version.\n","date":"21 September 2025","externalUrl":null,"permalink":"/posts/how-to-deploy-hugo-to-github-pages-with-github-actions-and-custom-domain/","section":"Posts","summary":"","title":"How to Deploy Hugo to Github Pages With Github Actions and Custom Domain","type":"posts"},{"content":"","date":"21 September 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]